=begin pod

=head1 NAME

Terminal::ANSIFancy - Formatted strings using ANSI escape sequences.


=head1 SYNOPSIS

=begin code

use Terminal::ANSIFancy;

say fancy 'this is bold and blue', :bold, :fg<blue>;

say fancy :underline, :fg<red>;
warn 'red stuff generated by another function';
say fancy :reset;

=end code


=head1 DESCRIPTION

Terminal::ANSIFancy provides an interface for generating
fancy text intended for terminals.

The following functions are available:

=head2 C<unfancy()>

C<unfancy()> removes all "style" (i.e. '\e[m') escape sequences
from a string, then returns it.

So C<'foo' ~~ unfancy fancy 'foo', :bold>.

=head2 C<fanciness()>

C<fanciness()> takes a string, and returns a list
corresponding to the I<first> escape sequence it encounters.

You may pass the list as a L<style string|#The_Style_Language> to C<fancy()>.

Each element of the list corresponds one option generally given
to C<fancy()> (apart from C<:style>).

So C<('underline', 'bright blue', 'on red') ~~ fanciness fancy :fg<bright blue>, :bg<red>, :underline>.


=head2 C<fancy()>

C<fancy()> fancifies a string, or simply returns the fanciness
corresponding to the options, and according to ANSI escape sequences.
The options are as follows:

=item C<Bool :reset> - the reset escape is sent before anything else;
=item C<Bool :bold> - text is bold;
=item C<Bool :inverted> - text is inverted;
=item C<Bool :underlined> - text is underlined;
=item C<Color :fg> - foreground color;
=item C<Color :bg> - background color;
=item C<StyleStr :style> - L<style string|#The_Style_Language>;

C<fancy()> has two modes. When it does not receive any non-named
arguments, it returns the escape sequence.
When it receives non-named arguments, it returns each argument
prepended by the escape sequence, all concatenated together,
followed by the reset sequence.

C<fancy()>, when given no arguments, will
return an empty string.
C<fancy()>, when given the empty string, will
return the reset sequence.


For example, the following are all equivalent:

=begin code
# this is what happens...
my $esc = fancy :bold, :fg<blue>, :bg<green>;
$esc ~ ($str0, $str1).join($esc) ~ fancy :reset;

# when you do this:
fancy $str0, $str1, :bold, :fg<blue>, :bg<green>;

# perl 6 has different ways of giving named parameters...
fancy $str0, $str1, bold=>True, fg => 'blue', bg => 'green';

# or you could use a style string...
fancy $str0, $str1, :style<blue on green, bold>;

# or a Term::ANSIColor-style style string...
fancy $str0, $str1, :style<bold blue on_green>;

# <foo bar> is really ('foo', 'bar'), not 'foo bar',
# but that never stopped me from making them equivalent...
# (_only_ for the :style parameter!):
fancy $str0, $str1, style => 'bold blue on green';

# you can actually leave out spaces in the style.
# please don't.
fancy $str0, $str1, :style<boldblueongreen>;

# You could also use fancy() as a method.
# This may often be a clearer syntax
($str0, $str1).&fancy: :bold, :fg<blue>, :bg<green>;

# fanciness... (this is very indirect)
fancy $str0, $str1, style => fanciness fancy :style<blue on green, bold>
=end code



=head1 Examples

=begin code
say fancy 'If given as a seperate argument, ',
          (fancy 'a fancy string inherits', :inverted), ' ',
          'the fanciness', :fg<yellow>, :bg<blue>;

say fancy :fg<bright red>, :bg<green>,
          'colors are ', (fancy :bold, 'awesome'), '!';

say fancy :bold, :fg<red>, :bg<green>,
          'you can ', (fancy :!bold, 'unbold'),
          ' things too.';
say fancy :style<underline>, :fg<magenta>, :bg<cyan>,
          'You can use :style to set attributes instead, ',
          'if you want.';

say fancy :style<red on cyan, inverted>,
          'you can use style strings to set color as well';

say fancy :style<red on_cyan inverse>,
          'You can even use Term::ANSIColor's ',
          'strange style strings.';

say fancy :fg<blue>, :bg<yellow>, :style<red on green, bold>,
          'If, for some reason, you want to use :style, ',
          'and other options, the other options will be ',
          'inserted afterwards in the escape sequence, ',
          'making them (in this case blue on yellow) ',
          'the ones shown if you have a clash like this.';

say fancy :fg<blue>, :bg<yellow>, fancy :style<red on green, bold>,
          'You can override that with a nested call, ',
          'so this is red on green.';

my Str $foo = fancy "Of course, you don't have to say() it. "
                    ~ "This will still be blue.\n", :fg<blue>;
print $foo ~ "and this is just normal text...\n";
=end code


=head1 Colors

The following are base colors:
=item black
=item red
=item green
=item yellow
=item blue
=item magenta
=item cyan
=item white
=item normal
=item default (default is the same as normal)

One can set C<:fg>, C<:bg>, or a color
in a L<style string|#The_Style_Language>. to any base color,
possibly preceded by 'bright', which indicates that the bright
version of the color is to be used.


=head1 Attributes

The following are attributes:

=item reset
=item bold
=item italic
=item underline
=item blink
=item inverse
=item hide
=item unbold
=item ununderline
=item unblink
=item uninvert

One can set an attribute
in a L<style string|#The_Style_Language>. to any attribute,
possibly with a suffix like 'ing' or 'ed'.


=head1 The Style Language

"because CSS is stupid" -- the author.

=item 'and' is a space;
=item underscores are spaces;
=item spaces are spaces;
=item words can (and I<should>) be delimited by spaces;
=item a color is any L<color|#Colors>;
=item an attribute is any L<attribute|#Attributes>;
=item a background color is 'on' followed by a color;
=item a term is a color, background color, or attribute;
=item commas can (but don't have to) delimit terms;

Attributes and colors basically mean what you think they mean.
If you want a more definite description of the Style grammar,
you can read the source code. It's written as a grammar,
so it's fairly easy to read.

These rules also have the intentional side-effect
of being compatible with Term(inal)?::ANSIColor.

=head1 Term::ANSIColor

You can use Term::ANSIColor functions if you really want to.
=begin code
use Terminal::ANSIFancy :ANSIColor;
say colored ['blue', 'bold'], 'I am blue and bold';
=end code

It's basically implemented like this (some things removed for brevity):
=begin code
sub color           (*@a          ) { fancy     :style(@a.join: ',') }
multi sub colored   (Str $c, *@a  ) { fancy $c, :style(@a.join: ',') }
multi sub colored   (Array $a, *@c) { fancy @c, :style($a.join: ',') }
sub colorstrip      (*@c          ) { unfancy @c }
sub uncolor         (Str $s       ) { fanciness $s, :compat }
sub colorvalid      (*@c          ) { Style.parse(@c.join(',')).Bool }
=end code

=head1 Internals

This module contains some internal structure
which may be useful to some people.

=begin code
use Term::ANSIFancy :internals;

print fancy-escape 1, 32;
say "I am bold and green.";
print fancy-escape 0;

print fancy-escape attributes<bold>, fg-colors<green>;
say "I am bold and green, too.";
print fancy-escape attributes<reset>;
=end code


=head1 MISC

Push/Pop functionality was deemed not very useful by the author,
however, should you want to use it, it's not very hard to implement:
=begin code
use Terminal::ANSIFancy :DEFAULT, :style;
my @stack;
sub push_style (StyleStr $s) { fancy :style(@stack.push($s).first: :end) }
sub pop_style {
	given @stack.pop {
		when .defined { fancy :reset :style(@stack.join: ',') }
		default       { fancy :reset }
	}
}
=end code


=head1 NOTES

If some of the attributes don't show up in your terminal,
and others do (i.e. bold shows but italic doesn't),
it probably just means that your terminal doesn't support
the attribute. If that really matters to you, you can
use a different terminal (for example, urxvt supports
italics; many terminals don't). Bright colors will not show up
in 8-color terminals (such as linuxterm).
This is explained quite well in the NOTES section of
`perldoc Term::ANSIColor`.

A large portion of the code in this module was heavily inspired
by Terminal::ANSIColor and the perl 5 module Term::ANSIColor,
which I have used extensively in the past.

=end pod
